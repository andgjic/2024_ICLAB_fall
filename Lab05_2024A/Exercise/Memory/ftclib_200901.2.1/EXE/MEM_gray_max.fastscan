///////////////////////////////////////////////////////////////////////////////////
// 
//              Synchronous High Speed Single Port SRAM Compiler 
// 
//                    UMC 0.18um GenericII Logic Process
//    __________________________________________________________________________
// 
// 
//        (C) Copyright 2002-2009 Faraday Technology Corp. All Rights Reserved.
// 
//      This source code is an unpublished work belongs to Faraday Technology
//      Corp.  It is considered a trade secret and is not to be divulged or
//      used by parties who have not received written authorization from
//      Faraday Technology Corp.
// 
//      Faraday's home page can be found at:
//      http://www.faraday-tech.com/
//     
// ________________________________________________________________________________
// 
//       Module Name       :  MEM_gray_max  
//       Word              :  256           
//       Bit               :  8             
//       Byte              :  1             
//       Mux               :  1             
//       Power Ring Type   :  port          
//       Power Ring Width  :  2 (um)        
//       Output Loading    :  0.05 (pf)     
//       Input Data Slew   :  0.02 (ns)     
//       Input Clock Slew  :  0.02 (ns)     
// 
// ________________________________________________________________________________
// 
//       Library          : FSA0M_A
//       Memaker          : 200901.2.1
//       Date             : 2024/10/09 21:07:14
// 
// ________________________________________________________________________________
// 
//       Library          : FSA0M_A
//       Memaker          : 200901.2.1
//       Date             : 2024/10/09 21:07:15
//
///////////////////////////////////////////////////////////////////////////////////

model MEM_gray_max (
    A0, A1, A2, A3, A4, A5, A6, A7,
    DI0, DI1, DI2, DI3, DI4, DI5, DI6, DI7,
    DO0, DO1, DO2, DO3, DO4, DO5, DO6, DO7,
    WEB,
    CK, CS, OE) (

    input (WEB, CK, CS, OE) ()
    input (A0, A1, A2, A3, A4, A5, A6, A7) ()
    input (DI0, DI1, DI2, DI3, DI4, DI5, DI6, DI7) ()
    intern(WE)(primitive = _inv (WEB, WE);)
    intern(WECS)(primitive = _and (WE,CS,WECS);)
    intern(WEN)(primitive = _and (WE,CS,WEN);)
    intern(REN)(primitive = _and (WEB,CS,REN);)

    output (DO0, DO1, DO2, DO3, DO4, DO5, DO6, DO7) (
        data_size = 8;
        address_size = 8;
        min_address = 0;
        max_address = 255;
        edge_trigger = WR;
        read_write_conflict = XX;
        primitive = _cram(, ,
            _write{H,H,H} (CK, WECS, A0, A1, A2, A3, A4, A5, A6, A7, DI0, DI1, DI2, DI3, DI4, DI5, DI6, DI7),
            _read{Z,H,H,H} (OE, CK, REN, A0, A1, A2, A3, A4, A5, A6, A7, DO0, DO1, DO2, DO3, DO4, DO5, DO6, DO7)
        );
    )
)
