///////////////////////////////////////////////////////////////////////////////////
// 
//              Synchronous High Speed Single Port SRAM Compiler 
// 
//                    UMC 0.18um GenericII Logic Process
//    __________________________________________________________________________
// 
// 
//        (C) Copyright 2002-2009 Faraday Technology Corp. All Rights Reserved.
// 
//      This source code is an unpublished work belongs to Faraday Technology
//      Corp.  It is considered a trade secret and is not to be divulged or
//      used by parties who have not received written authorization from
//      Faraday Technology Corp.
// 
//      Faraday's home page can be found at:
//      http://www.faraday-tech.com/
//     
// ________________________________________________________________________________
// 
//       Module Name       :  Memory_32_256  
//       Word              :  256            
//       Bit               :  32             
//       Byte              :  1              
//       Mux               :  1              
//       Power Ring Type   :  port           
//       Power Ring Width  :  2 (um)         
//       Output Loading    :  0.05 (pf)      
//       Input Data Slew   :  0.02 (ns)      
//       Input Clock Slew  :  0.02 (ns)      
// 
// ________________________________________________________________________________
// 
//       Library          : FSA0M_A
//       Memaker          : 200901.2.1
//       Date             : 2024/10/27 11:56:44
// 
// ________________________________________________________________________________
// 
//       Library          : FSA0M_A
//       Memaker          : 200901.2.1
//       Date             : 2024/10/27 11:56:46
//
///////////////////////////////////////////////////////////////////////////////////

model Memory_32_256 (
    A0, A1, A2, A3, A4, A5, A6, A7,
    DI0, DI1, DI2, DI3, DI4, DI5, DI6, DI7, DI8, DI9, DI10, DI11, DI12, DI13, DI14, DI15, DI16, DI17, DI18, DI19, DI20, DI21, DI22, DI23, DI24, DI25, DI26, DI27, DI28, DI29, DI30, DI31,
    DO0, DO1, DO2, DO3, DO4, DO5, DO6, DO7, DO8, DO9, DO10, DO11, DO12, DO13, DO14, DO15, DO16, DO17, DO18, DO19, DO20, DO21, DO22, DO23, DO24, DO25, DO26, DO27, DO28, DO29, DO30, DO31,
    WEB,
    CK, CS, OE) (

    input (WEB, CK, CS, OE) ()
    input (A0, A1, A2, A3, A4, A5, A6, A7) ()
    input (DI0, DI1, DI2, DI3, DI4, DI5, DI6, DI7, DI8, DI9, DI10, DI11, DI12, DI13, DI14, DI15, DI16, DI17, DI18, DI19, DI20, DI21, DI22, DI23, DI24, DI25, DI26, DI27, DI28, DI29, DI30, DI31) ()
    intern(WE)(primitive = _inv (WEB, WE);)
    intern(WECS)(primitive = _and (WE,CS,WECS);)
    intern(WEN)(primitive = _and (WE,CS,WEN);)
    intern(REN)(primitive = _and (WEB,CS,REN);)

    output (DO0, DO1, DO2, DO3, DO4, DO5, DO6, DO7, DO8, DO9, DO10, DO11, DO12, DO13, DO14, DO15, DO16, DO17, DO18, DO19, DO20, DO21, DO22, DO23, DO24, DO25, DO26, DO27, DO28, DO29, DO30, DO31) (
        data_size = 32;
        address_size = 8;
        min_address = 0;
        max_address = 255;
        edge_trigger = WR;
        read_write_conflict = XX;
        primitive = _cram(, ,
            _write{H,H,H} (CK, WECS, A0, A1, A2, A3, A4, A5, A6, A7, DI0, DI1, DI2, DI3, DI4, DI5, DI6, DI7, DI8, DI9, DI10, DI11, DI12, DI13, DI14, DI15, DI16, DI17, DI18, DI19, DI20, DI21, DI22, DI23, DI24, DI25, DI26, DI27, DI28, DI29, DI30, DI31),
            _read{Z,H,H,H} (OE, CK, REN, A0, A1, A2, A3, A4, A5, A6, A7, DO0, DO1, DO2, DO3, DO4, DO5, DO6, DO7, DO8, DO9, DO10, DO11, DO12, DO13, DO14, DO15, DO16, DO17, DO18, DO19, DO20, DO21, DO22, DO23, DO24, DO25, DO26, DO27, DO28, DO29, DO30, DO31)
        );
    )
)
